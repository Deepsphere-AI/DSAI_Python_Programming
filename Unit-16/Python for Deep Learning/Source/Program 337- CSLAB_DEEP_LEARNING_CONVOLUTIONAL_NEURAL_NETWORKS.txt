
/*********************************************************************************************************************
  
  File Name 	:   CSLAB_DEEP_LEARNING_CONVOLUTIONAL_NEURAL_NETWORKS
  Purpose 	:   A Program in Python for Convlutional Neural Networks using Deep Learning
  Author	:   Durga Prasad
  Reviewer 	:   Jothi Periasamy
  Date and Time	:   03/01/2019 11:18 hrs
  Version	:   1.0	
  Change History: 
_______________________________________________________________________________________________________________________

   Who				   When 			        Why
_______________________________________________________________________________________________________________________


    DP				03/01/2019		           Initital Release 

________________________________________________________________________________________________________________________


/***********************************************************************************************************************

## Program Description : Program for Convlutional Neural Networks using Deep Learning in Python

## Python Development Environment & Runtime - Python, Anaconda

import tensorflow as vAR_tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D

import pickle

vAR_CSLAB_pickle_in = open("vAR_CSLAB_X.pickle","rb")
vAR_CSLAB_X = pickle.load(vAR_CSLAB_pickle_in)

vAR_CSLAB_pickle_in = open("vAR_CSLAB_y.pickle","rb")
vAR_CSLAB_y = pickle.load(vAR_CSLAB_pickle_in)

vAR_CSLAB_X = vAR_CSLAB_X/255.0

vAR_CSLAB_model = Sequential()

vAR_CSLAB_model.add(Conv2D(256, (3, 3), input_shape=vAR_CSLAB_X.shape[1:]))

vAR_CSLAB_model.add(Activation('relu'))

vAR_CSLAB_model.add(MaxPooling2D(pool_size=(2, 2)))

vAR_CSLAB_model.add(Conv2D(256, (3, 3)))

vAR_CSLAB_model.add(Activation('relu'))

vAR_CSLAB_model.add(MaxPooling2D(pool_size=(2, 2)))

vAR_CSLAB_model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors

vAR_CSLAB_model.add(Dense(64))

vAR_CSLAB_model.add(Dense(1))

vAR_CSLAB_model.add(Activation('sigmoid'))

vAR_CSLAB_model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

vAR_CSLAB_model.fit(vAR_CSLAB_X, vAR_CSLAB_y, batch_size=32, epochs=3, validation_split=0.3)

/****************************************************************************************************************************
  Disclaimer.

We are providing this code block strictly for learning and researching, this is not a production
ready code. We have no liability on this particular code under any circumstances; users should use
this code on their own risk. All software, hardware and othr products that are referenced in these 
materials belong to the respective vendor who developed or who owns this product.

/****************************************************************************************************************************
  