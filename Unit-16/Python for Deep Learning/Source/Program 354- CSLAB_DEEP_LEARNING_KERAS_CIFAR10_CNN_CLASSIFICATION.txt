
/*********************************************************************************************************************
  
  File Name 	:   CSLAB_DEEP_LEARNING_KERAS_CIFAR10_CNN_CLASSIFICATION
  Purpose 	:   A Program in Python for Cifar10 Image Classification using Keras Library in Deep Learning
  Author	:   Durga Prasad
  Reviewer 	:   Jothi Periasamy
  Date and Time	:   07/01/2019 17:33 hrs
  Version	:   1.0	
  Change History: 
_______________________________________________________________________________________________________________________

   Who				   When 			        Why
_______________________________________________________________________________________________________________________


    DP				07/01/2019		           Initital Release 

________________________________________________________________________________________________________________________


/***********************************************************************************************************************

## Program Description : Program in Python for Cifar10 Image Classification using Keras Library in Deep Learning

## Python Development Environment & Runtime - Python, Anaconda

from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import os

vAR_CSLAB_batch_size = 32
vAR_CSLAB_num_classes = 10
vAR_CSLAB_epochs = 100
vAR_CSLAB_data_augmentation = True
vAR_CSLAB_num_predictions = 20
vAR_CSLAB_save_dir = os.path.join(os.getcwd(), 'saved_models')
vAR_CSLAB_model_name = 'keras_cifar10_trained_model.h5'

# The data, split between train and test sets:
(vAR_CSLAB_x_train, vAR_CSLAB_y_train), (vAR_CSLAB_x_test, vAR_CSLAB_y_test) = cifar10.load_data()
print('x_train shape:', vAR_CSLAB_x_train.shape)
print(vAR_CSLAB_x_train.shape[0], 'train samples')
print(vAR_CSLAB_x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
vAR_CSLAB_y_train = keras.utils.to_categorical(vAR_CSLAB_y_train, vAR_CSLAB_num_classes)
vAR_CSLAB_y_test = keras.utils.to_categorical(vAR_CSLAB_y_test, vAR_CSLAB_num_classes)

vAR_CSLAB_model = Sequential()
vAR_CSLAB_model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=vAR_CSLAB_x_train.shape[1:]))
vAR_CSLAB_model.add(Activation('relu'))
vAR_CSLAB_model.add(Conv2D(32, (3, 3)))
vAR_CSLAB_model.add(Activation('relu'))
vAR_CSLAB_model.add(MaxPooling2D(pool_size=(2, 2)))
vAR_CSLAB_model.add(Dropout(0.25))

vAR_CSLAB_model.add(Conv2D(64, (3, 3), padding='same'))
vAR_CSLAB_model.add(Activation('relu'))
vAR_CSLAB_model.add(Conv2D(64, (3, 3)))
vAR_CSLAB_model.add(Activation('relu'))
vAR_CSLAB_model.add(MaxPooling2D(pool_size=(2, 2)))
vAR_CSLAB_model.add(Dropout(0.25))

vAR_CSLAB_model.add(Flatten())
vAR_CSLAB_model.add(Dense(512))
vAR_CSLAB_model.add(Activation('relu'))
vAR_CSLAB_model.add(Dropout(0.5))
vAR_CSLAB_model.add(Dense(vAR_CSLAB_num_classes))
vAR_CSLAB_model.add(Activation('softmax'))

# initiate RMSprop optimizer
vAR_CSLAB_opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
vAR_CSLAB_model.compile(loss='categorical_crossentropy',
              optimizer=vAR_CSLAB_opt,
              metrics=['accuracy'])

vAR_CSLAB_x_train = vAR_CSLAB_x_train.astype('float32')
vAR_CSLAB_x_test = vAR_CSLAB_x_test.astype('float32')
vAR_CSLAB_x_train /= 255
vAR_CSLAB_x_test /= 255

if not vAR_CSLAB_data_augmentation:
    print('Not using data augmentation.')
    vAR_CSLAB_model.fit(vAR_CSLAB_x_train, vAR_CSLAB_y_train,
              batch_size=vAR_CSLAB_batch_size,
              epochs=vAR_CSLAB_epochs,
              validation_data=(vAR_CSLAB_x_test, vAR_CSLAB_y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    vAR_CSLAB_datagen = ImageDataGenerator(
        featurewise_center=False,
        samplewise_center=False,
        featurewise_std_normalization=False,
        samplewise_std_normalization=False,
        zca_whitening=False,  
        zca_epsilon=1e-06,  
        rotation_range=0,  
        width_shift_range=0.1,
        height_shift_range=0.1,
        shear_range=0.,  
        zoom_range=0., 
        channel_shift_range=0.,
        fill_mode='nearest',
        cval=0.,
        horizontal_flip=True,
        vertical_flip=False,
        rescale=None,
        preprocessing_function=None,
        data_format=None,
        validation_split=0.0)

    vAR_CSLAB_datagen.fit(vAR_CSLAB_x_train)

    vAR_CSLAB_model.fit_generator(vAR_CSLAB_datagen.flow(vAR_CSLAB_x_train, vAR_CSLAB_y_train,
                                     batch_size=vAR_CSLAB_batch_size),
                        epochs=vAR_CSLAB_epochs,
                        validation_data=(vAR_CSLAB_x_test, vAR_CSLAB_y_test),
                        workers=4)

# Save model and weights
if not os.path.isdir(vAR_CSLAB_save_dir):
    os.makedirs(vAR_CSLAB_save_dir)
vAR_CSLAB_model_path = os.path.join(vAR_CSLAB_save_dir, vAR_CSLAB_model_name)
vAR_CSLAB_model.save(vAR_CSLAB_model_path)
print('Saved trained model at %s ' % vAR_CSLAB_model_path)

# Score trained model.
vAR_CSLAB_scores = vAR_CSLAB_model.evaluate(vAR_CSLAB_x_test, vAR_CSLAB_y_test, verbose=1)
print('Test loss:', vAR_CSLAB_scores[0])
print('Test accuracy:', vAR_CSLAB_scores[1])

/****************************************************************************************************************************
  Disclaimer.

We are providing this code block strictly for learning and researching, this is not a production
ready code. We have no liability on this particular code under any circumstances; users should use
this code on their own risk. All software, hardware and othr products that are referenced in these 
materials belong to the respective vendor who developed or who owns this product.

/****************************************************************************************************************************
  