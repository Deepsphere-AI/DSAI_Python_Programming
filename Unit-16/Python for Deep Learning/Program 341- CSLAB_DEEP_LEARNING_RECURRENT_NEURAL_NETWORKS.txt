
/*********************************************************************************************************************
  
  File Name 	:   CSLAB_DEEP_LEARNING_RECURRENT_NEURAL_NETWORKS
  Purpose 	:   A Program in Python for Recurrent Neural Networks using Deep Learning
  Author	:   Durga Prasad
  Reviewer 	:   Jothi Periasamy
  Date and Time	:   03/01/2019 15:37 hrs
  Version	:   1.0	
  Change History: 
_______________________________________________________________________________________________________________________

   Who				   When 			        Why
_______________________________________________________________________________________________________________________


    DP				03/01/2019		           Initital Release 

________________________________________________________________________________________________________________________


/***********************************************************************************************************************

## Program Description : Program for Recurrent Neural Networks using Deep Learning in Python

## Python Development Environment & Runtime - Python, Anaconda

import tensorflow as vAR_tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM#, CuDNNLSTM

vAR_CSLAB_mnist = vAR_tf.keras.datasets.mnist  # mnist is a dataset of 28x28 images of handwritten digits and their labels
(vAR_CSLAB_x_train, vAR_CSLAB_y_train),(vAR_CSLAB_x_test, vAR_CSLAB_y_test) = vAR_CSLAB_mnist.load_data()  # unpacks images to x_train/x_test and labels to y_train/y_test

vAR_CSLAB_x_train = vAR_CSLAB_x_train/255.0
vAR_CSLAB_x_test = vAR_CSLAB_x_test/255.0

print(vAR_CSLAB_x_train.shape)
print(vAR_CSLAB_x_train[0].shape)

vAR_CSLAB_model = Sequential()

# IF you are running with a GPU, try out the CuDNNLSTM layer type instead (don't pass an activation, tanh is required)
vAR_CSLAB_model.add(LSTM(128, input_shape=(vAR_CSLAB_x_train.shape[1:]), activation='relu', return_sequences=True))
vAR_CSLAB_model.add(Dropout(0.2))

vAR_CSLAB_model.add(LSTM(128, activation='relu'))
vAR_CSLAB_model.add(Dropout(0.1))

vAR_CSLAB_model.add(Dense(32, activation='relu'))
vAR_CSLAB_model.add(Dropout(0.2))

vAR_CSLAB_model.add(Dense(10, activation='softmax'))

vAR_CSLAB_opt = vAR_tf.keras.optimizers.Adam(lr=0.001, decay=1e-6)

# Compile model
vAR_CSLAB_model.compile(loss='sparse_categorical_crossentropy',optimizer=vAR_CSLAB_opt,metrics=['accuracy'])

vAR_CSLAB_model.fit(vAR_CSLAB_x_train,vAR_CSLAB_y_train,epochs=3,validation_data=(vAR_CSLAB_x_test, vAR_CSLAB_y_test))

/****************************************************************************************************************************
  Disclaimer.

We are providing this code block strictly for learning and researching, this is not a production
ready code. We have no liability on this particular code under any circumstances; users should use
this code on their own risk. All software, hardware and othr products that are referenced in these 
materials belong to the respective vendor who developed or who owns this product.

/****************************************************************************************************************************
  