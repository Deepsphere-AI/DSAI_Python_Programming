
/*********************************************************************************************************************
  
  File Name 	:   CSLAB_TENSORFLOW_RANDOM_FOREST_V1
  Purpose 	:   A Program in Python Tensorflow for Random Forest
  Author	:   Durga Prasad
  Reviewer 	:   Jothi Periasamy
  Date and Time	:   24/12/2018 15:25 hrs
  Version	:   1.0	
  Change History: 
_______________________________________________________________________________________________________________________

   Who				   When 			        Why
_______________________________________________________________________________________________________________________


    DP				19/12/2018		           Initital Release 

________________________________________________________________________________________________________________________


/***********************************************************************************************************************

## Program Description : Program for Random Forest using Tensorflow in Python

## Python Development Environment & Runtime - Python, Anaconda, Tensorflow, Tensorboard

from __future__ import print_function

import numpy as vAR_np

import sklearn

from sklearn import datasets

import pandas as vAR_pd

import tensorflow as vAR_tf

#from tensorflow.contrib.tensor_forest.python import tensor_forest

from tensorflow.python.ops import resources

vAR_CSLAB_data = vAR_pd.read_csv('Iris.csv')

vAR_CSLAB_input_x = vAR_CSLAB_data.iloc[:, 0:-1].values

vAR_CSLAB_input_y = vAR_CSLAB_data.iloc[:,4].values

from sklearn.model_selection import train_test_split

vAR_CSLAB_X_train, vAR_CSLAB_X_test, vAR_CSLAB_y_train, vAR_CSLAB_y_test = train_test_split(vAR_CSLAB_input_x, vAR_CSLAB_input_y, test_size = 0.25, random_state = 0)

vAR_CSLAB_data1 = vAR_CSLAB_data.iloc[:,:].values

# Parameters

vAR_CSLAB_num_steps = 100 # Total steps to train

vAR_CSLAB_num_classes = 2 

vAR_CSLAB_num_features = 108 

vAR_CSLAB_num_trees = 10 

vAR_CSLAB_max_nodes = 1000

# Input and Target placeholders 

vAR_CSLAB_X = vAR_tf.placeholder(vAR_tf.float32, shape=[None, vAR_CSLAB_num_features])

vAR_CSLAB_Y = vAR_tf.placeholder(vAR_tf.int64, shape=[None])


# Random Forest Parameters

vAR_CSLAB_hparams = tensor_forest.ForestHParams(num_classes=vAR_CSLAB_num_classes, num_features=vAR_CSLAB_num_features, num_trees=vAR_CSLAB_num_trees)

# Build the Random Forest

vAR_tf.reset_default_graph()

#vAR_CSLAB_forest_graph = tensor_forest.RandomForestGraphs(vAR_CSLAB_hparams)

# Get training graph and loss

vAR_CSLAB_train_op = vAR_CSLAB_forest_graph.training_graph(vAR_CSLAB_X, vAR_CSLAB_Y)

vAR_CSLAB_loss_op = vAR_CSLAB_forest_graph.training_loss(vAR_CSLAB_X, vAR_CSLAB_Y)


# Measure the accuracy

vAR_CSLAB_infer_op, _, _ = vAR_CSLAB_forest_graph.inference_graph(vAR_CSLAB_X)

vAR_CSLAB_correct_prediction = vAR_tf.equal(vAR_tf.argmax(vAR_CSLAB_infer_op, 1), vAR_tf.cast(vAR_CSLAB_Y, vAR_tf.int64))

vAR_CSLAB_accuracy_op = vAR_tf.reduce_mean(vAR_tf.cast(vAR_CSLAB_correct_prediction, vAR_tf.float32))

# Initialize the variables (i.e. assign their default value) and forest resources

vAR_CSLAB_init_vars = vAR_tf.group(vAR_tf.global_variables_initializer(), resources.initialize_resources(resources.shared_resources()))

    

# Start TensorFlow session

vAR_sess = vAR_tf.Session()



# Run the initializer

vAR_sess.run(vAR_init_vars)



# Training

for i in range(1, vAR_CSLAB_num_steps + 1):

    _, vAR_CSLAB_l = vAR_sess.run([vAR_CSLAB_train_op, vAR_CSLAB_loss_op], feed_dict={vAR_CSLAB_X: vAR_CSLAB_X_train, vAR_CSLAB_Y: vAR_CSLAB_y_train})

    if i % 50 == 0 or i == 1:

        vAR_CSLAB_acc = vAR_sess.run(vAR_CSLAB_accuracy_op, feed_dict={vAR_CSLAB_X: vAR_CSLAB_X_train, vAR_CSLAB_Y: vAR_CSLAB_y_train})

        print('Step %i, Loss: %f, Acc: %f' % (i, vAR_CSLAB_l, vAR_CSLAB_acc))


# Test Model

print("Test Accuracy:", vAR_sess.run(vAR_CSLAB_accuracy_op, feed_dict={vAR_CSLAB_X: vAR_CSLAB_X_test, vAR_CSLAB_Y: vAR_CSLAB_y_test}))

    

/****************************************************************************************************************************
  Disclaimer.

We are providing this code block strictly for learning and researching, this is not a production
ready code. We have no liability on this particular code under any circumstances; users should use
this code on their own risk. All software, hardware and othr products that are referenced in these 
materials belong to the respective vendor who developed or who owns this product.

/****************************************************************************************************************************
  